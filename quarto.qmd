# Quarto

```{r}
#| echo: false

options(conflicts.policy = "depends.ok")
library(tidyverse)
```

## General

[Comprehensive guide](https://quarto.org/docs/guide/) to Quarto

### Chunk options

Chunk options are now specified inside the r backtics, with the following syntax:

`#| echo: false`  
`#| warning: false`  

To specify these options globally, they need to be added to the `_quarto.yml` file, with these lines:

`execute: `  
&nbsp;&nbsp;&nbsp;`  echo: false`  
&nbsp;&nbsp;&nbsp;`  warning: false`  



### Tables

#### HTML

Plain knitr::kable() renders a nicely striped table in HTML:

```{r}
#| echo: false
#| warning: false

mtcars %>% 
  select(mpg, cyl, gear) %>%
  head(5) %>%
  rownames_to_column("make") %>%
  mutate(model = word(make, start = 2),
    make = word(make)) %>% 
  relocate(model, .after="make") %>%
  knitr::kable(.,
        align = c("l", "l", "c", "c", "c"),
        col.names = c("Make", "Model", "Miles Per Gallon", "Cylinders", "Gears"))


```


However, when you call kableExtra, it does away with the nice striping and spacing and you then have to define that explicitly!

```{r}
#| echo: false
#| warning: false

library(kableExtra, exclude="group_rows")

mtcars %>% 
  select(mpg, cyl, gear) %>%
  head(5) %>%
  rownames_to_column("make") %>%
  mutate(model = word(make, start = 2),
    make = word(make)) %>% 
  relocate(model, .after="make") %>%
  knitr::kable(.,
        align = c("l", "l", "c", "c", "c"),
        col.names = c("Make", "Model", "Miles Per Gallon", "Cylinders", "Gears")) 


```

Note the table above, although the code is identical to the first table, has lost all formatting thanks to invoking kableExtra. The table below re-produces that via kable_styling (with additional features such as floating around text, and footnotes; although it seems the float doesn't actually work!). 


```{r}
#| echo: false
#| warning: false


mtcars %>% 
  select(mpg, cyl, gear) %>%
  head(5) %>%
  rownames_to_column("make") %>%
  mutate(model = word(make, start = 2),
    make = word(make)) %>% 
  relocate(model, .after="make") %>%
  kbl(.,format = "html",
        align = c("l", "l", "c", "c", "c"),
        col.names = c("Make", "Model", "Miles Per Gallon", "Cylinders", "Gears")) %>%
  kable_styling(bootstrap_options = "striped",
                full_width = F,
                position = "float_right") %>%
  footnote(general = "Here is a general comments of the table. ",
           number = c("Footnote 1; ", "Footnote 2; "),
           alphabet = c("Footnote A; ", "Footnote B; "),
           symbol = c("Footnote Symbol 1; ", "Footnote Symbol 2")
           )
           
```

Additional HTML-only features of kableExtra are documented [here](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html#HTML_Only_Features)


#### PDF
The documentation for producing LaTeX tables in kableExtra is [here](https://haozhu233.github.io/kableExtra/awesome_table_in_pdf.pdf)

The following two tables demonstrate a complex table of the type used in the PDF ema and burden papers (here replicated with a far simpler dataset). This first table is the table code as extracted directly from the manuscript, with no additional formatting. It displays not unlike an HTML table:

```{r}
#| echo: false
#| warning: false

# display and format table
iris %>% 
  mutate(size = if_else(Petal.Width > 1, "large", "small")) %>%
  group_by(Species, size) %>% 
  tally() %>%
  mutate(perc = n/nrow(iris)) %>% 
  rbind(tibble(Species = "setosa", size = "large")) %>%
  rbind(tibble(Species = "virginica", size = "small")) %>%
  arrange(Species, size) %>% 
  ungroup() %>% 
  select(-Species) %>%    # TABLE CODE STARTS HERE vv 
  kbl(longtable = TRUE,
      booktabs = T,
      col.names = c("", "N", "%"),
      align = c("l", "c", "c"),
      digits = 1,
      caption = "Iris") %>%
  kable_styling() %>% 
  row_spec(row = 0, align = "c", italic = TRUE) %>% 
  pack_rows("Setosa", 1, 2, bold = FALSE) %>% 
  pack_rows("Versicolor", 3, 4, bold = FALSE) %>% 
  pack_rows("Virginica", 5, 6, bold = FALSE)  %>% 
  footnote(general="N = 75", threeparttable = TRUE) 

```

In LaTeX, this table displays quite differently. Below, the same code has been modified to reproduce *exactly* the look of the table as it appears in the PDF manuscript. That is, the code in the chunk above produces the output below when rendered with knitr to PDF; but rendering that output to HTML requires the additions in the chunk below:

* `bootstrap_options = "none"` added to kable_styling removes the default horizontal lines, under each row, but then font size and table width must now be specified. 
* `pack_rows()` adds horizontal lines in HTML but not LaTeX; those must be removed with the `label_row_css` option . 
* Finally, column width is specified, and horizontal lines around the column headers and before the footnote, are added with `row_spec()`'s `extra_css` option.

```{r}
#| echo: false
#| warning: false


options(knitr.kable.NA = "")

# display and format table
iris %>% 
  mutate(size = if_else(Petal.Width > 1, "large", "small")) %>%
  group_by(Species, size) %>% 
  tally() %>%
  mutate(perc = n/nrow(iris)) %>% 
  rbind(tibble(Species = "setosa", size = "large")) %>%
  rbind(tibble(Species = "virginica", size = "small")) %>%
  arrange(Species, size) %>% 
  ungroup() %>% 
  select(-Species) %>%  # TABLE CODE STARTS HERE vv 
  kbl(longtable = TRUE,
      booktabs = T,
      col.names = c("", "N", "%"),
      align = c("l", "c", "c"),
      digits = 1,
      caption = "Iris") %>%
  kable_styling(bootstrap_options = "none", #remove all horizontal lines; must now specify font size and table width
                font_size = 12,
                full_width = TRUE) %>% 
  row_spec(row = 0, align = "c", italic = TRUE) %>% 
  pack_rows("Setosa", 1, 2, bold = FALSE, label_row_css = "border-bottom: none;") %>%  #remove horizontal line below packed rows
  pack_rows("Versicolor", 3, 4, bold = FALSE, label_row_css = "border-bottom: none;") %>%  #remove horizontal line below packed rows
  pack_rows("Virginica", 5, 6, bold = FALSE, label_row_css = "border-bottom: none;")  %>%  #remove horizontal line below packed rows
  footnote(general="N = 75", threeparttable = TRUE) %>%
  column_spec(1, width = "4in") %>% #specify column width
  column_spec(2:3, width = "1in") %>% #specify column width
  row_spec(0, extra_css = "border-bottom: 1px solid; border-top: 1px solid") %>% #add borders on the header row
  row_spec(6, extra_css = "border-bottom: 1px solid") #add a border after the last row, before the footnote
```

#### Useful Table Options and features

To be sure tables display with NA cells as blanks (instead of "NA") include this before your first table:

`options(knitr.kable.NA = "")`

kableExtra has a function is collapse_rows, yet that seems to be [persistently](https://stackoverflow.com/questions/73789357/kableextra-html-table-not-collapsing-rows) [broken](https://github.com/haozhu233/kableExtra/issues/624)

`row_spec()` has a parameter, `hline_after`, which, ostensibly, should create a horizontal line under that row, right? Apparently it [only works on LaTeX](https://stackoverflow.com/questions/53655983/row-spec-function-from-kableextra-does-not-create-a-horizontal-line-in-html-ou) although this is undocumented. Apparently the solution is to add `row_spec(X, extra_css = "border-bottom: 1px solid"))` (where x is the rownum; 0 for the header, `nrow(df)` for the last row)

Similarly, to supress hlines on headers created by `pack_rows()`, you need to add `extra_css = "border-bottom: none"` into the `pack_rows()` command.




### Rendering

#### Single-page rendering

Hitting the Render button renders the single active document. This will be the primary method of rendering for analysis documents, manuscripts, and presentations. 

This method can also be used to re-render a single chapter in a book or a single page on a website.

#### Full book/website rendering

For books and websites, which have many .qmd documents linked together, you would render the full book by calling `quarto::quarto_render()` to render all documents in the active project directory.

For books and websites, if anything changes in the .yml file (such as addition or deletion of a chapter), you MUST re-render the entire directory in this manner, otherwise the added/deleted chapter will not be rendered correctly.


#### Rendering other formats and targets

You can specify render targets and document render ordering more specifically in project metadata, see https://quarto.org/docs/projects/quarto-projects.html#render-targets

#### PDF

You can specify rendering to PDF format by adding the following to your .yml file:

format:
  pdf: 
    documentclass: book

You can then explictly render just the PDF format by specifying both the output format and the filename in the call to quarto_render:

quarto::quarto_render(output_format = "pdf",output_file = "dwt.pdf")

##### PDF Fonts
To specify a font you add the following to the YAML:

If using Xelatex:  
`mainfont : FontName # for document text`
`monofont : FontName  # for code chunk text` 

If using pdflatex:  
`fontfamily : FontName # for document text`

Where `FontName` is the name of your desired system font. To find available system fonts, run, `systemfonts::system_fonts()` and look for the *name* of the font (not the name of the font .tff file). For example, if you wish to use Arial font, your `FontName` should be ArialMT, rather than arial (the name of the font file)

## Documents

We use Quarto documents for two purposes - reproducible analyses and submitted papers.  We will generally render analysis doc to html and papers to pdf.  The Quarto Guide provides more detail on on creating [pdf](https://quarto.org/docs/output-formats/pdf-basics.html) and [html](https://quarto.org/docs/output-formats/html-basics.html)

These documents are styled primarily using Markdown.  The Quarto Guide provides more detail on [markdown basics](https://quarto.org/docs/authoring/markdown-basics.html)


## Journal Articles

### Templates

Quarto does have a system for applying journal article templates to quarto docs, see [this reference page](https://quarto.org/docs/journals/)

The list of available templates is still somewhat small, but extending them seems doable.

* [Info on creating a custom template](https://quarto.org/docs/journals/formats.html)
* [Template for creating a custom template](https://github.com/quarto-journals/article-format-template)


Related reference links for creating an AJP template:

* [AJP Manuscript requirements](https://ajp.psychiatryonline.org/ajp_ifora )  
* [Example AJP Latex Template](https://tex.stackexchange.com/questions/127639/template-for-american-journal-of-psychiatry)
* [More APA stype templates](https://www.overleaf.com/latex/templates/tagged/apa)  

### Bibliographies
To add a bibliography with a citation style, add the following lines to the _quarto.yml file:

`bibliography: references.bib`  
`csl: name_of_csl_file.csl`  

Note, we will typically call our csl files from our central lab_support repo; which simply requires the URL of the raw file from github:

`csl: https://raw.githubusercontent.com/jjcurtin/lab_support/main/rmd_templates/csl/national-library-of-medicine-grant-proposals.csl`


The Quarto Guide provides more detail about how to work with [citations and footnotes](https://quarto.org/docs/authoring/footnotes-and-citations.html). As with markdown, the format is `[@citekey1; @citekey2]` — citations go inside square brackets and are separated by semicolons

## Reproducible Analyses


## Presentations

We use Quarto to make revealjs slide decks for presentations.  The Quarto Guide provides extensive documentation and sample slides.  You can begin with the [overview](https://quarto.org/docs/presentations) of presentations across formats (Quarto can also render powerpoint and other formats).  Follow this with a [revealjs overview](https://quarto.org/docs/presentations/revealjs/) and then the revealjs [reference chapter](https://quarto.org/docs/reference/formats/presentations/revealjs.html).  The Quarto Guide also provides a [chapter on presenter tools](https://quarto.org/docs/presentations/revealjs/presenting.html).


Divs (:::) and spans([]) are used extensively in presentations.  An introduction to their use is provided in the [markdown basics chapter](https://quarto.org/docs/authoring/markdown-basics.html#divs-and-spans). The Pandoc manual provides [more detail](https://pandoc.org/MANUAL.html#divs-and-spans).


## Books and Websites

Information on setting up a book: <https://quarto.org/docs/books/>

Information on setting up a website: <https://quarto.org/docs/websites/> 

Information on setting up Github Pages to publish a book/website on commit: <https://quarto.org/docs/publishing/github-pages.html#render-to-docs>

The difference between a book and a website in quarto is the syntax in the `_quarto.yml` file. Books have chapters, websites have sections; there are also a few differences in the types of metadata options you can specify (for example, books have titles and authors, websites do not). The main visible difference in the published output is that book chapters are numbered, while website sections are not. 


## Publishing

You can [publish](https://quarto.org/docs/publishing) documents, books, and presentations to a variety of places.

### Presentations and Documents 
Our preferred location for presentations (and Quarto Docs) is [Quarto Pub](https://quartopub.com/).  This site is public and free.  To use it, you need to set up an account first.

To publish a presentation (or other Quarto doc) to Quarto Pub, you should first log in on your default browsers.  You should next go to the Terminal tab in the RStudio IDE.  Navigate to the folder that contains your presentation.  Then type `quarto publish quarto-pub`.  If this is the first time you are publishing at Quarto Pub on that computer, you will need to authorize it.  Follow the prompts in the web browser and then in the terminal to complete the publication process.  This authorization is saved in a file called _publish.yml, which will be accessed for future updates to the presentation.

See [additional instructions](https://quarto.org/docs/publishing/quarto-pub.html) in the Quarto guide if necessary.

### Books and Websites

We have chosen to use Github Pages to publish several of our books. See [this link](https://quarto.org/docs/publishing/github-pages.html) for detailed information on setting up your repo to have a Github Page and to use Github Actions to publish. 

Basically, any commit which includes changed html files tells Github Actions to re-build the book. The publishing workflow therefore consists of a) rendering locally, and b) committing the newly-rendered documents via github desktop. It usually takes <2 minutes for Github Actions to build and deploy the updated pages


## Terminal Commands

* `quarto publish quarto-pub` to publish a presentation or document to Quarto Pub

* 

