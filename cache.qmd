# Cache


```{r}
library(tidyverse)
library(tidymodels)

tidymodels_prefer()
```

[Introduction to cache in RMarkdown](https://bookdown.org/yihui/rmarkdown-cookbook/cache.html) and some [more detail](https://yihui.org/knitr/demo/cache/)

[Detail on cache invalidation](https://yihui.org/en/2018/06/cache-invalidation/)

More detail on [paths](https://bookdown.org/yihui/rmarkdown-cookbook/cache-path.html) and [lazy loading](https://bookdown.org/yihui/rmarkdown-cookbook/cache-lazy.html)


Better solutions

* [manual caching by saving objects]()
* [xfun::cache_rds()](https://bookdown.org/yihui/rmarkdown-cookbook/cache-rds.html#cache-rds) - The sweet spot?

   * `rerun = TRUE`
   * file is determined by the chunk option cache.path and the chunk label

```{r}
#| echo: true

# some globals that will be used to calculate x below in cached code
# if these globals change, you will need to re-run the cached code with 
# rerun = TRUE or delete the cached object directly so that it is 
# re-calculated
y <- 2
z <- 3
```

```{r}
#| echo: true

x <- xfun::cache_rds({
  Sys.sleep(5) # pretend that computations take a while
  y + z
},
dir = "cache/",
file = "cache_demo.rds")
```

Now we can use x without recalculating each time when executing the previous chunk in either console or when knit

```{r}
#| echo: true

x
```



